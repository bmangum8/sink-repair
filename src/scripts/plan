dataAccess.js
-will access the state from API
-needs to contain empty array of requests that will hold temporary state
-create and export getters: getRequests
for example: 
export const getColors = () => {
    return database.colors.map(color => ({...color}))
}
-create and export setters: setRequests?
for example:
export const setColor = (id) => {
database.orderBuilder.ColorId = id
}
-create and export a function that will change temporary state stored in requests and change it to permenant state. Use example from KneelDiamonds



main.js
-will import a SinkRepair.js (that will contain a function that combines all html representation )
-will create a const of mainContainer = document.querySelector("#container") //this attaches to the index.html component with the id of container
-creates a const renderAllHTML()- it should display all the inner HTML of the SinkRepair module
for example:
mainContainer.innerHTML = CarsRUs() //CarsRUs() was created in CarsRUs modules
-add an event listener of stateChanged. its a custom event. 
for example: 
document.addEventListener("stateChanged", event => {
    console.log("State of data has changed. Regenerating HTML...")
    renderAllHTML()
})



*done*index.html
*-references the stylesheet and scripts.main.js--done for me
*-in <body> sets the id="container" in <main>

*done* index.css and main.css--done for me



SinkRepair.js
-create a const SinkRepair() that will return the HTML of the web page
for example:
<h1>Cars</h1>
<article class="colors">
<section class="choices_color choices">
<h2>Colors</h2>
${Colors()} //This function would create html of all color options
</section>
repeat for other sections. </article>
-use kneel diamonds as an example
-add order button html and set id





* done* Requests.js
-import getRequests
-set const for requests= getRequests()
-create a function that builds a list of requests and creates its html representation
-it will take an request (requestObject) as a parameter
-will return the html of the description only for now









//I dont think we will do modules like these that we did in past projects
Colors.js
-import getColors and setColors from database
-set a const of colors to getColors()
-add an eventListener---will need example code from book, I think. This will be the drop down menu?
document.addEventListener(
    "change",
    (event) => {
        if (event.target.name === "metal") {
            setMetal(parseInt(event.target.value))
        }
    }
)
-create and export a Colors function that will create html representation of the color options. //This is where we set the html element to the drop down menu type. 
return html
}

*Completed
Seats.js
Options.js
Wheels.js
-do the same for these modules